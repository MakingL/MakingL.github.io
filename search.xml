<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C++ 内存管理</title>
    <url>/2019/11/17/C-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h2 id="引导语"><a href="#引导语" class="headerlink" title="引导语"></a>引导语</h2><p>在 C++ 中，内存是通过 new 表达式分配，通过 delete 表达式释放的。标准库还定义了一个 allocator 类来分配动态内存块（allocator 可以实现内存分配和对象构造的分离）。</p>
<p>内存的正确释放是非常容易出错的地方： 要么内存永远不会被释放（<strong>内存泄漏</strong>），要么在仍有指针引用它时就被释放了（<strong>内存的二次释放问题</strong>）。新的标准库定义了智能指针类型—— shared_ptr、unique_ptr 和 weak_ptr，可令动态内存管理更为安全。</p>
<a id="more"></a>

<p>操作系统提供的资源除了内存，还有文件描述符、互斥锁、图形界面中的字型和笔刷、数据库连接以及网络 socket。不论哪种资源，<em>当程序不再使用它时，必须将它还给系统</em>。</p>
<p>尝试在任何运用情况下都确保以上所言，是件困难的事，尤其当考虑到异常、函数内多重回传路径、程序维护员改动软件却没能充分理解随之而来的冲击，态势就更明显了：资源管理的特殊手段还不很充分够用。</p>
<h2 id="标准库提供的智能指针类型"><a href="#标准库提供的智能指针类型" class="headerlink" title="标准库提供的智能指针类型"></a>标准库提供的智能指针类型</h2><table>
<thead>
<tr>
<th align="center">指针类型</th>
<th align="center">特征</th>
<th align="center">特征操作</th>
</tr>
</thead>
<tbody><tr>
<td align="center">shared_ptr</td>
<td align="center">引用计数管理资源</td>
<td align="center">获得原始指针 get()</td>
</tr>
<tr>
<td align="center">unique_ptr</td>
<td align="center">某一时刻都只能有一个 unique_ptr 指向给定对象（auto_ptr 的替代品）</td>
<td align="center">release()、reset()；不能直接拷贝或赋值</td>
</tr>
<tr>
<td align="center">weak_ptr</td>
<td align="center">不控制所指向的对象生命周期，指向一个由 shared_ptr 管理的对象</td>
<td align="center">不能使用 weak_ptr 直接访问对象，而必须调用 lock() 方法</td>
</tr>
</tbody></table>
<p>shared_ptr 不直接支持管理动态数组，若要使用，需要提供自己定义的删除器</p>
<ul>
<li><p>与 unique_ptr 不同，shared_ptr 不直接支持管理动态数组。如果希望使用 shared_ptr 管理一个动态数组，必须提供自己定义的删除器：</p>
  <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt; sp(<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>], [](<span class="keyword">int</span> *p) &#123;  <span class="keyword">delete</span>[] p; &#125;);   <span class="comment">// 为了使用 shared_ptr 管理动态数组，必须提供一个删除器</span></span><br><span class="line">sp.reset(); <span class="comment">// 使用指定的删除器： lambda 表达式释放数组，它使用 delete[]</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="C-动态内存的实践建议"><a href="#C-动态内存的实践建议" class="headerlink" title="C++ 动态内存的实践建议"></a>C++ 动态内存的实践建议</h2><ol>
<li><p>以对象管理资源</p>
<ul>
<li><p>获得资源后立刻放进资源管理对象内。资源取得时机便是初始化时机（RAII， <strong>后面的 RAII 对象即是指此类对象</strong>）。</p>
</li>
<li><p>资源管理对象运用析构函数确保资源被释放。不论控制流如何离开区块，一旦对象被销毁，其析构函数自然就会被自动调用，于是资源被释放。</p>
</li>
<li><p>在以对象管理资源的情况下，如何解决二次释放的问题： 引用计数型指针。标准库提供了 shared_ptr、unique_ptr 和 weak_ptr 三种智能指针类型。</p>
<p>  一个类使用动态生存期的资源，可能是出于以下需求之一：</p>
<ul>
<li>程序不知道自己需要使用多少对象</li>
<li>程序不知道所需对象的准确类型</li>
<li>程序需要在<strong>多个对象间共享数据</strong></li>
</ul>
</li>
</ul>
</li>
<li><p>在资源管理类中小心 copying 行为</p>
<ul>
<li>复制 RAII 对象必须一并复制它所管理的资源，以资源的 copying 行为决定 RAII 对象的 copying 行为</li>
<li>普遍而常见的 RAII class copying 行为是： 抑制（或者禁止） copying、施行引用计数法(reference counting)</li>
</ul>
</li>
<li><p>在资源管理类中提供对原始资源的访问</p>
<ul>
<li>APIs 往往要求访问原始资源 (raw resource)（比如为了与 C 语言留下的接口兼容）, 所以每隔 RAII class 应该提供一个 “取得其所管理之资源”的办法</li>
<li>对原始资源的访问可能经由显示转换或隐式转换。一般而言显示转换比较安全，但隐式转换对客户比较方便</li>
</ul>
</li>
<li><p>使用智能指针时应该坚持的基本规范</p>
<ul>
<li>不使用相同的内置指针值初始化（或 release）多个智能指针</li>
<li>不 delete get() （shared_ptr 提供的返回原始指针的方法）返回的指针</li>
<li>不使用 get() 返回的指针初始化或 reset 另一个智能指针</li>
<li>如果使用智能指针管理的资源不是 new 分配的内存，记住传递给它一个删除器</li>
</ul>
</li>
<li><p>成对使用 new 和 delete 时要采取相同形式</p>
<ul>
<li>如果在 new 表达式中使用 <code>[]</code>，必须在相应的 delete 表达式中也使用 <code>[]</code>，如果在 new 表达式中不使用 <code>[]</code>，一定不要在相应的 delete 表达式中使用 <code>[]</code>。</li>
<li>当使用 new 时（也就是通过 new 动态生成一个对象），有两件事发生，第一，内存会被分配出来，第二，针对此内存会有一个（或更多）构造函数被调用。当使用 delete，也有两件事发生：针对此内存会有一个（或更多） 析构函数被调用，然后内存才被释放。delete 的最大问题在于： 即将被删除的内存之内究竟由多少对象？ (这个问题主要由 <code>delete</code> 和 <code>delete []</code> 以区别)</li>
</ul>
</li>
<li><p>以独立语句将 new 出来的对象置入智能指针</p>
<ul>
<li><p>以独立语句将 newed 对象存储于 （置入）智能指针内。如果不这样，一旦异常被抛出，有可能导致难以察觉的资源泄漏</p>
  <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">processWidget(<span class="keyword">new</span> Widget, priority());</span><br></pre></td></tr></table></figure>

<p>  对上面这条语句，在调用 processWidget 之前，编译器必须创建代码，做以下三件事:</p>
<ul>
<li><p>调用 priority</p>
</li>
<li><p>执行 “new Widget”</p>
</li>
<li><p>调用 shared_ptr 的构造函数</p>
<p>但是编译器最终执行这三条语句的顺序是不确定的，也许是下面的这种顺序：</p>
</li>
</ul>
<ol>
<li><p>执行 “new Widget”</p>
</li>
<li><p>调用 priority</p>
</li>
<li><p>调用 shared_ptr 的构造函数</p>
<p>如果在执行到第二条语句时发生了异常，则可能会造成在调用 processWidget 的过程中产生内存泄漏（并没有达到我们预期的用 shared_ptr 防卫内存泄漏的目的）。</p>
</li>
</ol>
</li>
</ul>
</li>
</ol>
<h2 id="malloc-和-delete-的区别"><a href="#malloc-和-delete-的区别" class="headerlink" title="malloc 和 delete 的区别"></a>malloc 和 delete 的区别</h2><ol>
<li>C 语言其实是不支持动态内存分配的，是通过 malloc 库函数来实现的，可能一些硬件不支持 malloc；而 C++ 中 <code>new</code> 是一个关键字，不管是在任意编译器上，任意硬件上，都是能够进行动态内存分配的，这是本质区别。</li>
<li>malloc 是基于<strong>字节</strong>来进行动态内存分配的， new 则是基于<strong>对象类型</strong>来进行动态内存分配。因此， malloc 需要自己指定申请的内存字节大小，而 new 可以不需要。</li>
<li>malloc 不具备内存初始化的特性，而 new 默认会调用对象的构造函数初始化分配的内存</li>
</ol>
<h2 id="如何定义一个只能在堆上（栈上）生成对象的类"><a href="#如何定义一个只能在堆上（栈上）生成对象的类" class="headerlink" title="如何定义一个只能在堆上（栈上）生成对象的类"></a>如何定义一个只能在堆上（栈上）生成对象的类</h2><p>参考链接： <a href="https://github.com/huihut/interview#如何定义一个只能在堆上栈上生成对象的类" target="_blank" rel="noopener">huihut/interview</a></p>
<h3 id="只能在堆上"><a href="#只能在堆上" class="headerlink" title="只能在堆上"></a>只能在堆上</h3><ul>
<li><p>方法</p>
<p>  将析构函数设置为私有</p>
</li>
<li><p>原因</p>
<p>  C++ 是静态绑定语言，编译器管理栈上对象的生命周期，编译器在为类对象分配栈空间时，会先检查类的析构函数的访问性。若析构函数不可访问，则不能在栈上创建对象。</p>
</li>
<li><p>实践建议</p>
<p>  此时 delete 也不能使用，建议将对象的构造和析构都封装成单独的函数，类似单例模式。</p>
</li>
</ul>
<h3 id="只能在栈上"><a href="#只能在栈上" class="headerlink" title="只能在栈上"></a>只能在栈上</h3><ul>
<li><p>方法</p>
<p>  将 new 和 delete 重载为私有</p>
</li>
<li><p>原因</p>
<p>  在堆上生成对象，使用 new 关键词操作，其过程分为两阶段：第一阶段，使用 new 在堆上寻找可用内存，分配给对象；第二阶段，调用构造函数生成对象。将 new 操作设置为私有，那么第一阶段就无法完成，就不能够在堆上生成对象。</p>
</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li>《C++ Primer（第五版）》[美] Stanley B.Lippman 著，王刚，杨巨峰  译</li>
<li>《Effective C++ （中文版 第三版）》[美] Scott Meyers 著，侯捷 译</li>
</ul>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>内存管理</tag>
      </tags>
  </entry>
  <entry>
    <title>博客部署完测试一下</title>
    <url>/2019/11/13/%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%AE%8C%E6%B5%8B%E8%AF%95%E4%B8%80%E4%B8%8B/</url>
    <content><![CDATA[<h2 id="BB-两句"><a href="#BB-两句" class="headerlink" title="BB 两句"></a>BB 两句</h2><p>花了两天时间， 弄了一下个人 GitHub Page， 其实一直想弄一个自己的博客网站的，虽然自己平时也在 CSDN 上写博客，主要是记录一些自己平时学习的笔记，方便以后自己查找，但是总觉得还是应该有个自己的博客网站，以方便自己以后将自己的笔记备份、迁移。</p>
<a id="more"></a>


<p>前两天心血来潮，网上搜了一下搭建 Github Page 的网站，确定了 Hexo + NexT 方案， 然后就一波操作，修改配置，创库、部署，一套下来真是累。</p>
<p>先发个文章看下效果。Cheers!</p>
]]></content>
      <categories>
        <category>test</category>
      </categories>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>测试的文章</title>
    <url>/2019/11/12/%E6%B5%8B%E8%AF%95%E7%9A%84%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<h1 id="这是一篇测试-Markdown-语法的文章，也是测试博客的文章"><a href="#这是一篇测试-Markdown-语法的文章，也是测试博客的文章" class="headerlink" title="这是一篇测试 Markdown 语法的文章，也是测试博客的文章"></a>这是一篇测试 Markdown 语法的文章，也是测试博客的文章</h1><p>这是一句更新测试的句子</p>
<h1 id="这是-H1-一s级标题"><a href="#这是-H1-一s级标题" class="headerlink" title="这是 H1 一s级标题"></a>这是 H1 一s级标题</h1><h2 id="这是-H2-二级标题"><a href="#这是-H2-二级标题" class="headerlink" title="这是 H2 二级标题"></a>这是 H2 二级标题</h2><h3 id="这是-H3-三级标题"><a href="#这是-H3-三级标题" class="headerlink" title="这是 H3 三级标题"></a>这是 H3 三级标题</h3><h4 id="这是-H4-四级标题"><a href="#这是-H4-四级标题" class="headerlink" title="这是 H4 四级标题"></a>这是 H4 四级标题</h4><h5 id="这是-H5-五级标题"><a href="#这是-H5-五级标题" class="headerlink" title="这是 H5 五级标题"></a>这是 H5 五级标题</h5><h6 id="这是-H6-六级标题"><a href="#这是-H6-六级标题" class="headerlink" title="这是 H6 六级标题"></a>这是 H6 六级标题</h6><a id="more"></a>

<h3 id="待办事项"><a href="#待办事项" class="headerlink" title="待办事项"></a>待办事项</h3><ul>
<li><input disabled="" type="checkbox"> 未完成事项</li>
<li><input checked="" disabled="" type="checkbox"> 完成事项</li>
<li><input checked="" disabled="" type="checkbox"> 完成事项</li>
</ul>
<h3 id="html代码"><a href="#html代码" class="headerlink" title="html代码"></a>html代码</h3><div>html代码</div>

<h3 id="流程图-语法"><a href="#流程图-语法" class="headerlink" title="流程图 (语法)"></a>流程图 (<a href="http://adrai.github.io/flowchart.js/" target="_blank" rel="noopener">语法</a>)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">st=&gt;start: 开始</span><br><span class="line">e=&gt;end: 结束</span><br><span class="line">op=&gt;operation: 操作步骤</span><br><span class="line">cond=&gt;condition: 是 或者 否?</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br></pre></td></tr></table></figure>

<h3 id="序列图-语法"><a href="#序列图-语法" class="headerlink" title="序列图 (语法)"></a>序列图 (<a href="https://github.com/bramp/js-sequence-diagrams/blob/master/src/grammar.jison" target="_blank" rel="noopener">语法</a>)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">小明-&gt;小李: 你好 小李, 最近怎么样?</span><br><span class="line">Note right of 小李: 小李想了想</span><br><span class="line">小李--&gt;小明: 还是老样子</span><br></pre></td></tr></table></figure>

<h3 id="脚注-1x"><a href="#脚注-1x" class="headerlink" title="脚注^1x"></a>脚注<a href="脚注的用法">^1x</a></h3><h3 id="表格Tables"><a href="#表格Tables" class="headerlink" title="表格Tables"></a>表格Tables</h3><table>
<thead>
<tr>
<th>First Header</th>
<th>Second Header</th>
</tr>
</thead>
<tbody><tr>
<td>Content Cell</td>
<td>Content Cell</td>
</tr>
<tr>
<td>Content Cell</td>
<td>Content Cell</td>
</tr>
</tbody></table>
<h3 id="文字格式"><a href="#文字格式" class="headerlink" title="文字格式"></a>文字格式</h3><p><strong>这是文字粗体格式</strong></p>
<p><strong>这是文字粗体格式</strong></p>
<p><em>这是文字斜体格式</em></p>
<p><em>这是文字斜体格式</em></p>
<p><del>在文字上添加删除线</del></p>
<h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><ul>
<li>项目1<ul>
<li>子项目1.1</li>
<li>子项目1.2<ul>
<li>子项目1.2.1</li>
</ul>
</li>
</ul>
</li>
<li>项目2</li>
<li>项目3</li>
</ul>
<h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><ol>
<li>项目1</li>
<li>项目2</li>
<li>项目3<ol>
<li>项目3.1</li>
<li>项目3.2</li>
</ol>
</li>
</ol>
<h3 id="有序列表起始编号"><a href="#有序列表起始编号" class="headerlink" title="有序列表起始编号"></a>有序列表起始编号</h3><ol start="58">
<li>项目5</li>
<li>项目6</li>
</ol>
<h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p><img src="http://xiaoshujiang.com/favicon.ico" alt="图片名称"><br>链接<br><a href="http://xiaoshujiang.com" target="_blank" rel="noopener">链接名称</a></p>
<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><blockquote>
<p>第一行引用文字<br>第二行引用文字</p>
</blockquote>
<h3 id="水平线"><a href="#水平线" class="headerlink" title="水平线"></a>水平线</h3><hr>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="行内代码"><a href="#行内代码" class="headerlink" title="行内代码"></a>行内代码</h4><p><code>var x = &quot;hello world&quot;</code></p>
<h4 id="块代码"><a href="#块代码" class="headerlink" title="块代码"></a>块代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> John Smith &lt;john.smith@example.com&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> l2f.gameserver.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &gt;&gt;++java.util.ArrayList++&lt;&lt;;</span><br><span class="line"></span><br><span class="line">&gt;&gt;~~<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">L2Character</span> </span>&#123;~~&lt;&lt;</span><br><span class="line">&gt;&gt;++<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">L2Character</span> <span class="keyword">extends</span> <span class="title">L2Object</span> </span>&#123;++&lt;&lt;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Short ABNORMAL_EFFECT_BLEEDING = <span class="number">0x0_0_0_1</span>; <span class="comment">// not sure</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveTo</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span> </span>&#123;</span><br><span class="line">    _ai = <span class="keyword">null</span>;</span><br><span class="line">    _log.warning(<span class="string">"Should not be called"</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">1</span> &gt; <span class="number">5</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** Task of AI notification */</span></span><br><span class="line">  <span class="meta">@SuppressWarnings</span>( &#123; <span class="string">"nls"</span>, <span class="string">"unqualified-field-access"</span>, <span class="string">"boxing"</span> &#125;)</span><br><span class="line">  &gt;&gt;==<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotifyAITask</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CtrlEvent _evt;</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; mList==&lt;&lt; = <span class="keyword">new</span> ArrayList&lt;String&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        getAI().notifyEvent(_evt, _evt<span class="class">.<span class="keyword">class</span>, <span class="title">null</span>)</span>;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">        t.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h3><h4 id="行内公式"><a href="#行内公式" class="headerlink" title="行内公式"></a>行内公式</h4><p>这是行内公式<code>!$ \Gamma(z) = \int_0^\infty t^{z-1}e^{-t}dt\,. $</code></p>
<h4 id="块公式"><a href="#块公式" class="headerlink" title="块公式"></a>块公式</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$$\Gamma(z) = \int_0^\infty t^&#123;z-1&#125;e^&#123;-t&#125;dt\,.$$</span><br></pre></td></tr></table></figure>

<h4 id="带编号的公式"><a href="#带编号的公式" class="headerlink" title="带编号的公式"></a>带编号的公式</h4><p><code>!$\eqref{ref1}$</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\begin&#123;equation&#125;</span><br><span class="line">\int_0^\infty \frac&#123;x^22&#125;&#123;e^x-1&#125;\,dx = \frac&#123;\pi^4&#125;&#123;15&#125;\label&#123;ref1&#125;</span><br><span class="line">\end&#123;equation&#125;</span><br></pre></td></tr></table></figure>

<p><code>!$\eqref{ref1}$</code></p>
<h3 id="统计图"><a href="#统计图" class="headerlink" title="统计图"></a>统计图</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;data&quot;: [ [[0, 0], [1, 1]] ],</span><br><span class="line">&quot;options&quot;: &#123; &quot;yaxis&quot;: &#123; &quot;max&quot;: 1 &#125; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="mermaid流程图，序列图，甘特图"><a href="#mermaid流程图，序列图，甘特图" class="headerlink" title="mermaid流程图，序列图，甘特图"></a>mermaid流程图，序列图，甘特图</h3><h4 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph TD;</span><br><span class="line">    A--&gt;B;</span><br><span class="line">    A--&gt;C;</span><br><span class="line">    B--&gt;D;</span><br><span class="line">    C--&gt;D;</span><br></pre></td></tr></table></figure>

<h4 id="序列图"><a href="#序列图" class="headerlink" title="序列图"></a>序列图</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">A-&gt;&gt; B: Query</span><br><span class="line">B-&gt;&gt; C: Forward query</span><br><span class="line">Note right of C: Thinking...</span><br><span class="line">C-&gt;&gt; B: Response</span><br><span class="line">B-&gt;&gt; A: Forward response</span><br></pre></td></tr></table></figure>

<h4 id="甘特图"><a href="#甘特图" class="headerlink" title="甘特图"></a>甘特图</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gantt</span><br><span class="line">        dateFormat  YYYY-MM-DD</span><br><span class="line">        title Adding GANTT diagram functionality to mermaid</span><br><span class="line">        section A section</span><br><span class="line">        Completed task            :done,    des1, 2014-01-06,2014-01-08</span><br><span class="line">        Active task               :active,  des2, 2014-01-09, 3d</span><br><span class="line">        Future task               :         des3, after des2, 5d</span><br><span class="line">        Future task2               :         des4, after des3, 5d</span><br><span class="line">        section Critical tasks</span><br><span class="line">        Completed task in the critical line :crit, done, 2014-01-06,24h</span><br><span class="line">        Implement parser and jison          :crit, done, after des1, 2d</span><br><span class="line">        Create tests for parser             :crit, active, 3d</span><br><span class="line">        Future task in critical line        :crit, 5d</span><br><span class="line">        Create tests for renderer           :2d</span><br><span class="line">        Add to mermaid                      :1d</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>test</category>
      </categories>
      <tags>
        <tag>测试</tag>
        <tag>语法</tag>
        <tag>MARKDOWN</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/11/11/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>test</category>
      </categories>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
</search>
